/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as UserIndexImport } from './routes/user/index'
import { Route as UserProfileImport } from './routes/user/profile'
import { Route as UserPasswordforgottenImport } from './routes/user/password_forgotten'
import { Route as UserLogoutImport } from './routes/user/logout'
import { Route as UserLoginImport } from './routes/user/login'
import { Route as UserChangepasswordImport } from './routes/user/change_password'
import { Route as UserAccessdeniedImport } from './routes/user/access_denied'
import { Route as pbCollectionRouteImport } from './routes/(pb)/$collection/route'
import { Route as pbCollectionIndexImport } from './routes/(pb)/$collection/index'
import { Route as pbCollectionNewImport } from './routes/(pb)/$collection/new'
import { Route as pbCollectionRecordIdImport } from './routes/(pb)/$collection/$recordId'
import { Route as pbCollectionRecordIdEditImport } from './routes/(pb)/$collection/$recordId_.edit'
import { Route as pbCollectionRecordIdDeleteImport } from './routes/(pb)/$collection/$recordId_.delete'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const UserIndexRoute = UserIndexImport.update({
  id: '/user/',
  path: '/user/',
  getParentRoute: () => rootRoute,
} as any)

const UserProfileRoute = UserProfileImport.update({
  id: '/user/profile',
  path: '/user/profile',
  getParentRoute: () => rootRoute,
} as any)

const UserPasswordforgottenRoute = UserPasswordforgottenImport.update({
  id: '/user/password_forgotten',
  path: '/user/password_forgotten',
  getParentRoute: () => rootRoute,
} as any)

const UserLogoutRoute = UserLogoutImport.update({
  id: '/user/logout',
  path: '/user/logout',
  getParentRoute: () => rootRoute,
} as any)

const UserLoginRoute = UserLoginImport.update({
  id: '/user/login',
  path: '/user/login',
  getParentRoute: () => rootRoute,
} as any)

const UserChangepasswordRoute = UserChangepasswordImport.update({
  id: '/user/change_password',
  path: '/user/change_password',
  getParentRoute: () => rootRoute,
} as any)

const UserAccessdeniedRoute = UserAccessdeniedImport.update({
  id: '/user/access_denied',
  path: '/user/access_denied',
  getParentRoute: () => rootRoute,
} as any)

const pbCollectionRouteRoute = pbCollectionRouteImport.update({
  id: '/(pb)/$collection',
  path: '/$collection',
  getParentRoute: () => rootRoute,
} as any)

const pbCollectionIndexRoute = pbCollectionIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => pbCollectionRouteRoute,
} as any)

const pbCollectionNewRoute = pbCollectionNewImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => pbCollectionRouteRoute,
} as any)

const pbCollectionRecordIdRoute = pbCollectionRecordIdImport.update({
  id: '/$recordId',
  path: '/$recordId',
  getParentRoute: () => pbCollectionRouteRoute,
} as any)

const pbCollectionRecordIdEditRoute = pbCollectionRecordIdEditImport.update({
  id: '/$recordId_/edit',
  path: '/$recordId/edit',
  getParentRoute: () => pbCollectionRouteRoute,
} as any)

const pbCollectionRecordIdDeleteRoute = pbCollectionRecordIdDeleteImport.update(
  {
    id: '/$recordId_/delete',
    path: '/$recordId/delete',
    getParentRoute: () => pbCollectionRouteRoute,
  } as any,
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/(pb)/$collection': {
      id: '/(pb)/$collection'
      path: '/$collection'
      fullPath: '/$collection'
      preLoaderRoute: typeof pbCollectionRouteImport
      parentRoute: typeof rootRoute
    }
    '/user/access_denied': {
      id: '/user/access_denied'
      path: '/user/access_denied'
      fullPath: '/user/access_denied'
      preLoaderRoute: typeof UserAccessdeniedImport
      parentRoute: typeof rootRoute
    }
    '/user/change_password': {
      id: '/user/change_password'
      path: '/user/change_password'
      fullPath: '/user/change_password'
      preLoaderRoute: typeof UserChangepasswordImport
      parentRoute: typeof rootRoute
    }
    '/user/login': {
      id: '/user/login'
      path: '/user/login'
      fullPath: '/user/login'
      preLoaderRoute: typeof UserLoginImport
      parentRoute: typeof rootRoute
    }
    '/user/logout': {
      id: '/user/logout'
      path: '/user/logout'
      fullPath: '/user/logout'
      preLoaderRoute: typeof UserLogoutImport
      parentRoute: typeof rootRoute
    }
    '/user/password_forgotten': {
      id: '/user/password_forgotten'
      path: '/user/password_forgotten'
      fullPath: '/user/password_forgotten'
      preLoaderRoute: typeof UserPasswordforgottenImport
      parentRoute: typeof rootRoute
    }
    '/user/profile': {
      id: '/user/profile'
      path: '/user/profile'
      fullPath: '/user/profile'
      preLoaderRoute: typeof UserProfileImport
      parentRoute: typeof rootRoute
    }
    '/user/': {
      id: '/user/'
      path: '/user'
      fullPath: '/user'
      preLoaderRoute: typeof UserIndexImport
      parentRoute: typeof rootRoute
    }
    '/(pb)/$collection/$recordId': {
      id: '/(pb)/$collection/$recordId'
      path: '/$recordId'
      fullPath: '/$collection/$recordId'
      preLoaderRoute: typeof pbCollectionRecordIdImport
      parentRoute: typeof pbCollectionRouteImport
    }
    '/(pb)/$collection/new': {
      id: '/(pb)/$collection/new'
      path: '/new'
      fullPath: '/$collection/new'
      preLoaderRoute: typeof pbCollectionNewImport
      parentRoute: typeof pbCollectionRouteImport
    }
    '/(pb)/$collection/': {
      id: '/(pb)/$collection/'
      path: '/'
      fullPath: '/$collection/'
      preLoaderRoute: typeof pbCollectionIndexImport
      parentRoute: typeof pbCollectionRouteImport
    }
    '/(pb)/$collection/$recordId_/delete': {
      id: '/(pb)/$collection/$recordId_/delete'
      path: '/$recordId/delete'
      fullPath: '/$collection/$recordId/delete'
      preLoaderRoute: typeof pbCollectionRecordIdDeleteImport
      parentRoute: typeof pbCollectionRouteImport
    }
    '/(pb)/$collection/$recordId_/edit': {
      id: '/(pb)/$collection/$recordId_/edit'
      path: '/$recordId/edit'
      fullPath: '/$collection/$recordId/edit'
      preLoaderRoute: typeof pbCollectionRecordIdEditImport
      parentRoute: typeof pbCollectionRouteImport
    }
  }
}

// Create and export the route tree

interface pbCollectionRouteRouteChildren {
  pbCollectionRecordIdRoute: typeof pbCollectionRecordIdRoute
  pbCollectionNewRoute: typeof pbCollectionNewRoute
  pbCollectionIndexRoute: typeof pbCollectionIndexRoute
  pbCollectionRecordIdDeleteRoute: typeof pbCollectionRecordIdDeleteRoute
  pbCollectionRecordIdEditRoute: typeof pbCollectionRecordIdEditRoute
}

const pbCollectionRouteRouteChildren: pbCollectionRouteRouteChildren = {
  pbCollectionRecordIdRoute: pbCollectionRecordIdRoute,
  pbCollectionNewRoute: pbCollectionNewRoute,
  pbCollectionIndexRoute: pbCollectionIndexRoute,
  pbCollectionRecordIdDeleteRoute: pbCollectionRecordIdDeleteRoute,
  pbCollectionRecordIdEditRoute: pbCollectionRecordIdEditRoute,
}

const pbCollectionRouteRouteWithChildren =
  pbCollectionRouteRoute._addFileChildren(pbCollectionRouteRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$collection': typeof pbCollectionRouteRouteWithChildren
  '/user/access_denied': typeof UserAccessdeniedRoute
  '/user/change_password': typeof UserChangepasswordRoute
  '/user/login': typeof UserLoginRoute
  '/user/logout': typeof UserLogoutRoute
  '/user/password_forgotten': typeof UserPasswordforgottenRoute
  '/user/profile': typeof UserProfileRoute
  '/user': typeof UserIndexRoute
  '/$collection/$recordId': typeof pbCollectionRecordIdRoute
  '/$collection/new': typeof pbCollectionNewRoute
  '/$collection/': typeof pbCollectionIndexRoute
  '/$collection/$recordId/delete': typeof pbCollectionRecordIdDeleteRoute
  '/$collection/$recordId/edit': typeof pbCollectionRecordIdEditRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/user/access_denied': typeof UserAccessdeniedRoute
  '/user/change_password': typeof UserChangepasswordRoute
  '/user/login': typeof UserLoginRoute
  '/user/logout': typeof UserLogoutRoute
  '/user/password_forgotten': typeof UserPasswordforgottenRoute
  '/user/profile': typeof UserProfileRoute
  '/user': typeof UserIndexRoute
  '/$collection/$recordId': typeof pbCollectionRecordIdRoute
  '/$collection/new': typeof pbCollectionNewRoute
  '/$collection': typeof pbCollectionIndexRoute
  '/$collection/$recordId/delete': typeof pbCollectionRecordIdDeleteRoute
  '/$collection/$recordId/edit': typeof pbCollectionRecordIdEditRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/(pb)/$collection': typeof pbCollectionRouteRouteWithChildren
  '/user/access_denied': typeof UserAccessdeniedRoute
  '/user/change_password': typeof UserChangepasswordRoute
  '/user/login': typeof UserLoginRoute
  '/user/logout': typeof UserLogoutRoute
  '/user/password_forgotten': typeof UserPasswordforgottenRoute
  '/user/profile': typeof UserProfileRoute
  '/user/': typeof UserIndexRoute
  '/(pb)/$collection/$recordId': typeof pbCollectionRecordIdRoute
  '/(pb)/$collection/new': typeof pbCollectionNewRoute
  '/(pb)/$collection/': typeof pbCollectionIndexRoute
  '/(pb)/$collection/$recordId_/delete': typeof pbCollectionRecordIdDeleteRoute
  '/(pb)/$collection/$recordId_/edit': typeof pbCollectionRecordIdEditRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$collection'
    | '/user/access_denied'
    | '/user/change_password'
    | '/user/login'
    | '/user/logout'
    | '/user/password_forgotten'
    | '/user/profile'
    | '/user'
    | '/$collection/$recordId'
    | '/$collection/new'
    | '/$collection/'
    | '/$collection/$recordId/delete'
    | '/$collection/$recordId/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/user/access_denied'
    | '/user/change_password'
    | '/user/login'
    | '/user/logout'
    | '/user/password_forgotten'
    | '/user/profile'
    | '/user'
    | '/$collection/$recordId'
    | '/$collection/new'
    | '/$collection'
    | '/$collection/$recordId/delete'
    | '/$collection/$recordId/edit'
  id:
    | '__root__'
    | '/'
    | '/(pb)/$collection'
    | '/user/access_denied'
    | '/user/change_password'
    | '/user/login'
    | '/user/logout'
    | '/user/password_forgotten'
    | '/user/profile'
    | '/user/'
    | '/(pb)/$collection/$recordId'
    | '/(pb)/$collection/new'
    | '/(pb)/$collection/'
    | '/(pb)/$collection/$recordId_/delete'
    | '/(pb)/$collection/$recordId_/edit'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  pbCollectionRouteRoute: typeof pbCollectionRouteRouteWithChildren
  UserAccessdeniedRoute: typeof UserAccessdeniedRoute
  UserChangepasswordRoute: typeof UserChangepasswordRoute
  UserLoginRoute: typeof UserLoginRoute
  UserLogoutRoute: typeof UserLogoutRoute
  UserPasswordforgottenRoute: typeof UserPasswordforgottenRoute
  UserProfileRoute: typeof UserProfileRoute
  UserIndexRoute: typeof UserIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  pbCollectionRouteRoute: pbCollectionRouteRouteWithChildren,
  UserAccessdeniedRoute: UserAccessdeniedRoute,
  UserChangepasswordRoute: UserChangepasswordRoute,
  UserLoginRoute: UserLoginRoute,
  UserLogoutRoute: UserLogoutRoute,
  UserPasswordforgottenRoute: UserPasswordforgottenRoute,
  UserProfileRoute: UserProfileRoute,
  UserIndexRoute: UserIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/(pb)/$collection",
        "/user/access_denied",
        "/user/change_password",
        "/user/login",
        "/user/logout",
        "/user/password_forgotten",
        "/user/profile",
        "/user/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/(pb)/$collection": {
      "filePath": "(pb)/$collection/route.tsx",
      "children": [
        "/(pb)/$collection/$recordId",
        "/(pb)/$collection/new",
        "/(pb)/$collection/",
        "/(pb)/$collection/$recordId_/delete",
        "/(pb)/$collection/$recordId_/edit"
      ]
    },
    "/user/access_denied": {
      "filePath": "user/access_denied.tsx"
    },
    "/user/change_password": {
      "filePath": "user/change_password.tsx"
    },
    "/user/login": {
      "filePath": "user/login.tsx"
    },
    "/user/logout": {
      "filePath": "user/logout.tsx"
    },
    "/user/password_forgotten": {
      "filePath": "user/password_forgotten.tsx"
    },
    "/user/profile": {
      "filePath": "user/profile.tsx"
    },
    "/user/": {
      "filePath": "user/index.tsx"
    },
    "/(pb)/$collection/$recordId": {
      "filePath": "(pb)/$collection/$recordId.tsx",
      "parent": "/(pb)/$collection"
    },
    "/(pb)/$collection/new": {
      "filePath": "(pb)/$collection/new.tsx",
      "parent": "/(pb)/$collection"
    },
    "/(pb)/$collection/": {
      "filePath": "(pb)/$collection/index.tsx",
      "parent": "/(pb)/$collection"
    },
    "/(pb)/$collection/$recordId_/delete": {
      "filePath": "(pb)/$collection/$recordId_.delete.tsx",
      "parent": "/(pb)/$collection"
    },
    "/(pb)/$collection/$recordId_/edit": {
      "filePath": "(pb)/$collection/$recordId_.edit.tsx",
      "parent": "/(pb)/$collection"
    }
  }
}
ROUTE_MANIFEST_END */
